{"version":3,"sources":["services/tasksApi.ts","lib/firebase.ts","utils/helperMethod.ts","components/TaskAdd/InputContainer/InputContainer.tsx","components/Modal/Modal.tsx","components/Spinner/Spinner.tsx","components/Backdrop/Backdrop.tsx","components/TaskAdd/TaskAdd.tsx","components/Input/Input.tsx","components/Modal/ConfModal/ConfModal.tsx","components/TaskCard/TaskCard.tsx","components/Task/Task.tsx","components/TodoList/TasksList/TasksList.tsx","components/TodoList/TodoList.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["collection","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","api","get","a","Promise","resolve","reject","then","data","tasksCollection","docs","map","item","task","catch","err","put","doc","id","toString","set","updateByKeyName","key","value","update","obj","delete","timeToString","str","split","join","currentTime","clock","Date","addZero","n","day","getDate","month","getMonth","year","getFullYear","getHour","getHours","minutes","getMinutes","randomId","taskList","rand","baseList","uniqueID","currRand","Math","round","random","filter","element","length","sortTasks","tasks","sort","b","taskTime","currDate","now","dayName","getDay","currentDate","initialTask","taskName","taskDesc","InputContainer","change","add","validation","showInvalid","Fragment","className","type","name","onChange","htmlFor","checkValid","onClick","Modal","children","title","show","close","confirmationType","data-testid","Spinner","Backdrop","TaskAdd","addTask","loading","useState","setTaskName","setTaskTime","setTaskDesc","isShowModal","setIsShowModal","valid","setValid","ShowInvalidMsg","setShowInvalidMsg","loaded","setLoaded","closeModal","resetInputs","useEffect","e","inputValue","target","inputName","trim","Input","onEdit","typeOfInput","isEdit","setIsEdit","currValue","setCurrValue","prevValue","ref","useRef","current","usePrevious","inputRef","textAreaRef","focus","onEditClick","prevState","inputAttr","style","display","onBlur","aria-label","ConfModal","remove","TaskCard","removeTask","editTask","confirmationModalShow","setConfirmationModalShow","confirmationClose","edit","t","v","Task","time","click","TasksList","taskClick","tasksList","TodoList","setTaskList","setTask","taskCard","setTaskCard","loadingList","setLoadingList","loadingTask","setLoadingTask","loadingAdd","setLoadingAdd","closeTaskCard","editTaskHandler","editedTask","updatedIndex","findIndex","toUpperCase","alert","addTaskHandler","newTask","removeTaskHandler","getAll","getAllTasks","taskId","searching","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e46586e0.chunk.js","sourcesContent":["import { ITask } from \"../components/interfaces\";\nimport { firebase } from \"../lib/firebase\";\n\nconst collection = firebase.firestore().collection(\"tasks\");\n\nconst putData = (data: ITask) => {\n  return new Promise((resolve, reject) => {\n    collection\n      .doc(data.id.toString())\n      .set(data)\n      .then(() => {\n        resolve(true);\n      })\n      .catch((err) => {\n        reject(false);\n      });\n  });\n};\n\nconst getData = async () => {\n  return new Promise((resolve, reject) => {\n    collection\n      .get()\n      .then((data) => {\n        const tasksCollection = data.docs.map((item) => {\n          const task = item.data();\n          return { ...task };\n        });\n        resolve(tasksCollection);\n      })\n      .catch((err) => reject(false));\n  });\n};\n\nconst updateByKeyName = (id: number, key: string, value: string) => {\n  return new Promise((resolve, reject) => {\n    collection\n      .doc(id.toString())\n      .update({ [key]: value })\n      .then((obj) => {\n        resolve(true);\n      })\n      .catch((err) => {\n        reject(false);\n      });\n  });\n};\n\nconst deleteTask = (id: number) => {\n  return new Promise((resolve, reject) => {\n    collection\n      .doc(id.toString())\n      .delete()\n      .then(() => {\n        resolve(true);\n      })\n      .catch((err) => {\n        reject(false);\n      });\n  });\n};\n\nconst api = {\n  get: getData,\n  put: putData,\n  updateByKeyName,\n  delete: deleteTask,\n};\n\nexport default api;\n","import Firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBy9E20bP8J3cUPJ3ToqcLZxc289z6Bn6U\",\n  authDomain: \"todolist-7e8ab.firebaseapp.com\",\n  databaseURL: \"https://todolist-7e8ab-default-rtdb.firebaseio.com\",\n  projectId: \"todolist-7e8ab\",\n  storageBucket: \"todolist-7e8ab.appspot.com\",\n  messagingSenderId: \"794149330635\",\n  appId: \"1:794149330635:web:d6002c6580484a0de0054e\",\n  measurementId: \"G-7PG110CMEN\",\n};\n\nexport const firebase = Firebase.initializeApp(firebaseConfig);\n","import { useEffect, useRef } from \"react\";\nimport { ITask } from \"../components/interfaces\";\n\nexport const timeToString = (str: string) => {\n  return str.split(\"T\").join(\" \");\n};\nexport const timeToListFormat = (value: string) => {\n  return value.split(\" \").join(\"T\");\n};\n\nexport const currentTime = () => {\n  const clock = new Date();\n  const addZero = (n: number) => (n < 10 ? \"0\" + n : n);\n  const getDay = clock.getDate();\n\n  const day = addZero(getDay);\n  const getMonth = clock.getMonth() + 1;\n  const month = addZero(getMonth);\n  const year = clock.getFullYear();\n  const getHour = clock.getHours();\n  const getMinutes = clock.getMinutes();\n  const minutes = addZero(getMinutes);\n  const hour = addZero(getHour);\n  return year + \"-\" + month + \"-\" + day + \"T\" + hour + \":\" + minutes;\n};\n\nexport const randomId = (taskList: ITask[]) => {\n  let rand = 0;\n  const baseList = [...taskList];\n  let uniqueID = false;\n  while (!uniqueID) {\n    const currRand = Math.round(Math.random() * 10000);\n    const searching = baseList.filter((element) => element.id === currRand);\n    if (searching.length === 0) {\n      uniqueID = true;\n      rand = currRand;\n    }\n  }\n  return rand;\n};\n\nexport const sortTasks = (tasks: ITask[]) => {\n  if (tasks)\n    return tasks.sort((a, b) => {\n      return a.taskTime >= b.taskTime ? 1 : -1;\n    });\n  else return [];\n};\n\nconst currentDate = () => {\n  const monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const now = new Date();\n  const day = now.getDate();\n  const month = monthNames[now.getMonth()];\n  const dayName = days[now.getDay()];\n  return { day, month, dayName };\n};\n\nexport const currDate = currentDate();\n\nexport const initialTask = {\n  id: 0,\n  taskName: \"\",\n  taskTime: \"\",\n  taskDesc: \"\",\n};\nexport const initialList = [\n  {\n    id: 0,\n    taskName: \"\",\n    taskTime: \"\",\n    taskDesc: \"\",\n  },\n];\n\nexport const objToArray = (obj: any) => {\n  return Object.keys(obj).map((key) => obj[key]);\n};\n\nexport const usePrevious = (value: string) => {\n  const ref = useRef(\"\");\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import React from \"react\";\n\nimport { IInputContainer } from \"../../interfaces\";\n\nexport const InputContainer: React.FC<IInputContainer> = ({\n  taskName,\n  taskTime,\n  change,\n  add,\n  taskDesc,\n  validation,\n  showInvalid,\n}) => {\n  const checkValid = (name: string) => {\n    if (showInvalid)\n      return !validation[name] && <span className=\"red\"> ( required! )</span>;\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"inputContainer\">\n        <div className=\"singleInputContainer\">\n          <input\n            type=\"text\"\n            id=\"taskName\"\n            name=\"taskName\"\n            onChange={change}\n            value={taskName}\n          />\n          <label\n            htmlFor=\"taskName\"\n            className={taskName.length !== 0 ? \"notEmpty\" : \"\"}\n          >\n            Name {checkValid(\"taskName\")}\n          </label>\n        </div>\n        <div className=\"singleInputContainer\">\n          <input\n            type=\"text\"\n            id=\"taskDesc\"\n            name=\"taskDesc\"\n            onChange={change}\n            value={taskDesc}\n          />\n          <label\n            htmlFor=\"taskDesc\"\n            className={taskDesc.length !== 0 ? \"notEmpty\" : \"\"}\n          >\n            Description\n          </label>\n        </div>\n        <div className=\"singleInputContainer\">\n          <input\n            type=\"datetime-local\"\n            id=\"taskTime\"\n            name=\"taskTime\"\n            onChange={change}\n            value={taskTime}\n          />\n          <label htmlFor=\"date\" className=\"notEmpty\">\n            Date\n          </label>\n        </div>\n        <div className=\"centerWrapper\">\n          <button className=\"successBtn\" onClick={add}>\n            Add\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nimport \"./Modal.css\";\nimport { IModal } from \"../interfaces\";\n\nexport const Modal: React.FC<IModal> = ({\n  children,\n  title,\n  show,\n  close,\n  confirmationType,\n}) => {\n  return (\n    <React.Fragment>\n      <div\n        data-testid=\"modal-backdrop\"\n        className={[\"backdrop\", show && \"backdropShow\"].join(\" \")}\n        onClick={close}\n      />\n      <div\n        data-testid=\"modal-wrapper\"\n        className={[\"modalWrapper\", confirmationType && \"modalConf\"].join(\" \")}\n      >\n        <div\n          data-testid=\"modal-box\"\n          className={show ? \"modalBox modalShow\" : \"modalBox\"}\n        >\n          <div className=\"modalTitle\">\n            <h3>{title}</h3>\n            <div\n              data-testid=\"modal-close\"\n              className=\"modalClose\"\n              onClick={close}\n            ></div>\n          </div>\n          <div className=\"modalContent\">{children}</div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nimport \"./Spinner.css\";\n\ninterface Props {}\n\nexport const Spinner: React.FC<Props> = () => {\n  return (\n    <div className=\"lds-ring\" data-testid=\"spinner\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./Backdrop.css\";\n\ninterface Props {}\n\nexport const Backdrop: React.FC<Props> = ({ children }) => {\n  return <div className=\"backdrop backdropShow onTop\">{children}</div>;\n};\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\n\nimport { currentTime } from \"../../utils/helperMethod\";\nimport { InputContainer } from \"./InputContainer/InputContainer\";\nimport { ITask } from \"../interfaces\";\nimport { Modal } from \"../Modal/Modal\";\nimport { Spinner } from \"../Spinner/Spinner\";\nimport { Backdrop } from \"../Backdrop/Backdrop\";\nimport \"./TaskAdd.css\";\n\ninterface Props {\n  addTask: (task: ITask) => void;\n  loading: boolean;\n}\n\nexport const TaskAdd: React.FC<Props> = ({ addTask, loading }) => {\n  const [taskName, setTaskName] = useState<string>(\"\");\n  const [taskTime, setTaskTime] = useState<string>(currentTime());\n  const [taskDesc, setTaskDesc] = useState<string>(\"\");\n  const [isShowModal, setIsShowModal] = useState(false);\n  const [valid, setValid] = useState({ taskName: false });\n  const [ShowInvalidMsg, setShowInvalidMsg] = useState(false);\n  const [loaded, setLoaded] = useState(true);\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    const inputValue = e.target.value;\n    const inputName = e.target.name;\n    if (inputName === \"taskDesc\") setTaskDesc(inputValue);\n    if (inputName === \"taskTime\") setTaskTime(inputValue);\n    if (inputName === \"taskName\") {\n      setTaskName(inputValue);\n      // validation if name is empty\n      if (inputValue.length > 0) setValid({ taskName: true });\n      else {\n        setValid({ taskName: false });\n        setShowInvalidMsg(true);\n      }\n      ///\n    }\n  };\n\n  const onAdd = () => {\n    if (taskName.trim().length === 0 || taskTime.trim().length === 0)\n      setShowInvalidMsg(true);\n    else {\n      setLoaded(false);\n      const newTask = {\n        id: 0,\n        taskName,\n        taskTime,\n        taskDesc,\n      };\n      return addTask(newTask);\n    }\n  };\n\n  const showModal = () => {\n    setIsShowModal(true);\n  };\n\n  const closeModal = () => {\n    setIsShowModal(false);\n    resetInputs();\n    setLoaded(true);\n  };\n\n  const resetInputs = () => {\n    setTaskName(\"\");\n    setTaskDesc(\"\");\n    setValid({ taskName: false });\n    setShowInvalidMsg(false);\n    setTaskTime(currentTime());\n  };\n\n  useEffect(() => {\n    if (!loaded && !loading) closeModal();\n  });\n\n  return (\n    <React.Fragment>\n      {loading && (\n        <Backdrop>\n          <Spinner />\n        </Backdrop>\n      )}\n      <div data-testid=\"addBtn\" className=\"addBtn\" onClick={showModal}></div>\n      <Modal\n        confirmationType={false}\n        show={isShowModal}\n        title=\"Add your new task\"\n        close={closeModal}\n      >\n        {isShowModal && (\n          <InputContainer\n            change={onChangeHandler}\n            add={onAdd}\n            taskName={taskName}\n            taskTime={taskTime}\n            taskDesc={taskDesc}\n            validation={valid}\n            showInvalid={ShowInvalidMsg}\n          />\n        )}\n      </Modal>\n    </React.Fragment>\n  );\n};\n","import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\n\nimport \"./Input.css\";\nimport { timeToString, usePrevious } from \"../../utils/helperMethod\";\nimport { IInput } from \"../interfaces\";\n\nexport const Input: React.FC<IInput> = ({\n  inputValue,\n  onEdit,\n  typeOfInput,\n}) => {\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [currValue, setCurrValue] = useState<string>(inputValue);\n\n  const prevValue = usePrevious(currValue);\n\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\n\n  useEffect(() => {\n    if (inputRef.current) inputRef.current.focus();\n    if (textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  }, [isEdit]);\n\n  const changeInputHandler = (\n    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setCurrValue(e.target.value);\n  };\n\n  const onEditClick = () => {\n    setIsEdit((prevState) => {\n      return !prevState;\n    });\n    if (isEdit) {\n      if (prevValue !== currValue) onEdit(currValue);\n    }\n  };\n\n  const onBlurHandler = () => {\n    onEditClick();\n  };\n\n  const inputAttr = {\n    style: isEdit ? { display: \"block\" } : { display: \"none\" },\n    value: currValue === \"Description:\" ? \"\" : currValue,\n    onChange: changeInputHandler,\n    onBlur: onBlurHandler,\n  };\n\n  return (\n    <div className=\"editInputContainer\" data-testid=\"input-container\">\n      {!isEdit ? (\n        <p>{typeOfInput === \"time\" ? timeToString(currValue) : currValue}</p>\n      ) : typeOfInput === \"textarea\" ? (\n        <textarea {...inputAttr} ref={textAreaRef}></textarea>\n      ) : (\n        <input\n          aria-label=\"input\"\n          type={typeOfInput === \"time\" ? \"datetime-local\" : \"text\"}\n          ref={inputRef}\n          {...inputAttr}\n        />\n      )}\n      <div\n        className=\"editInputBtnContainer\"\n        onClick={onEditClick}\n        data-testid=\"edit\"\n      >\n        {!isEdit && <span className=\"red\">EDIT</span>}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Modal } from \"../Modal\";\nimport \"../Modal.css\";\nimport { IConfModal } from \"../../interfaces\";\n\nexport const ConfModal: React.FC<IConfModal> = ({\n  title,\n  show,\n  close,\n  remove,\n  confirmationType,\n}) => {\n  return (\n    <Modal\n      confirmationType={confirmationType}\n      show={show}\n      title={title}\n      close={close}\n    >\n      {show && (\n        <div className=\"centerWrapper\">\n          <button className=\"dangerBtn\" onClick={close}>\n            No\n          </button>\n          <button className=\"successBtn\" onClick={remove}>\n            Yes\n          </button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { Backdrop } from \"../Backdrop/Backdrop\";\nimport { Input } from \"../../components/Input/Input\";\nimport { ITaskCard } from \"../interfaces\";\nimport { Modal } from \"../Modal/Modal\";\nimport { ConfModal } from \"../Modal/ConfModal/ConfModal\";\nimport { Spinner } from \"../Spinner/Spinner\";\n\nexport const TaskCard: React.FC<ITaskCard> = ({\n  task,\n  removeTask,\n  show,\n  editTask,\n  close,\n  loading,\n}) => {\n  const [confirmationModalShow, setConfirmationModalShow] = useState(false);\n\n  const confirmationShow = () => {\n    setConfirmationModalShow(true);\n  };\n  const confirmationClose = () => {\n    setConfirmationModalShow(false);\n  };\n  const removeTaskHandler = () => {\n    removeTask(task.id);\n    confirmationClose();\n  };\n  const edit = (t: string) => (v: string) => editTask(v, task.id, t);\n  const title = (\n    <Input edit={true} inputValue={task.taskName} onEdit={edit(\"taskName\")} />\n  );\n  const clickOnBackdrop = () => {\n    if (confirmationModalShow) {\n      setConfirmationModalShow(false);\n      return null;\n    }\n    return close();\n  };\n\n  return (\n    <div>\n      {loading && (\n        <Backdrop>\n          <Spinner />\n        </Backdrop>\n      )}\n      <Modal\n        data-testid=\"main-modal\"\n        confirmationType={false}\n        show={show}\n        title={show ? title : \"\"}\n        close={clickOnBackdrop}\n      >\n        {show && (\n          <div data-testid=\"main-modal-inputs\">\n            <Input\n              typeOfInput=\"time\"\n              edit={true}\n              inputValue={task.taskTime.toString()}\n              onEdit={edit(\"taskTime\")}\n            />\n            <Input\n              typeOfInput=\"textarea\"\n              edit={true}\n              inputValue={task.taskDesc ? task.taskDesc : \"Description:\"}\n              onEdit={edit(\"taskDesc\")}\n            />\n            <div className=\"centerWrapper\">\n              <button className=\"successBtn\" onClick={confirmationShow}>\n                Complete\n              </button>\n            </div>\n          </div>\n        )}\n        <ConfModal\n          confirmationType\n          show={confirmationModalShow}\n          title=\"Confim complete task?\"\n          close={confirmationClose}\n          remove={removeTaskHandler}\n        />\n      </Modal>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { timeToString } from \"../../utils/helperMethod\";\nimport { ITaskOnList } from \"../interfaces\";\nimport \"./Task.css\";\n\nexport const Task: React.FC<ITaskOnList> = ({ name, time, click }) => {\n  return (\n    <div className=\"Task\" onClick={click} data-testid=\"task\">\n      <div className=\"Task-name\">{name}</div>\n      <div>{time ? timeToString(time) : null}</div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Backdrop } from \"../../Backdrop/Backdrop\";\nimport { ITasksList } from \"../../interfaces\";\nimport { Spinner } from \"../../Spinner/Spinner\";\nimport { Task } from \"../../Task/Task\";\n\nexport const TasksList: React.FC<ITasksList> = ({\n  tasks,\n  taskClick,\n  loading,\n}) => {\n  let tasksList: {} | null = null;\n  if (loading)\n    tasksList = (\n      <Backdrop>\n        <Spinner />\n      </Backdrop>\n    );\n  else if (tasks.length !== 0) {\n    tasksList = tasks.map(({ id, taskName, taskTime }) => {\n      return (\n        <Task\n          key={id}\n          name={taskName}\n          time={taskTime}\n          click={() => taskClick(id)}\n        />\n      );\n    });\n  } else tasksList = \"Empty task list.\";\n\n  return (\n    <div className=\"mainWrapper\">\n      <div data-testid=\"tasks-list\" className=\"todoList\">\n        {tasksList}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport api from \"../../services/tasksApi\";\nimport { randomId, initialTask, sortTasks } from \"../../utils/helperMethod\";\nimport { TaskAdd } from \"../TaskAdd/TaskAdd\";\nimport { ITask } from \"../interfaces\";\nimport { TaskCard } from \"../TaskCard/TaskCard\";\nimport { TasksList } from \"./TasksList/TasksList\";\n\nexport const TodoList: React.FC = () => {\n  const [taskList, setTaskList] = useState<ITask[]>([]);\n  const [task, setTask] = useState<ITask>(initialTask);\n  const [taskCard, setTaskCard] = useState<boolean>(false);\n  const [loadingList, setLoadingList] = useState<boolean>(true);\n  const [loadingTask, setLoadingTask] = useState<boolean>(false);\n  const [loadingAdd, setLoadingAdd] = useState<boolean>(false);\n  const showTaskCard = (taskId: number) => {\n    const searching = [...taskList].filter((element) => element.id === taskId);\n    setTask(searching[0]);\n    setTaskCard(true);\n  };\n  const closeTaskCard = () => {\n    setTaskCard(false);\n  };\n\n  const editTaskHandler = async (value: string, id: number, key: string) => {\n    const editedTask = [...taskList];\n    const updatedIndex = editedTask.findIndex((element) => element.id === id);\n    editedTask[updatedIndex][key] =\n      key === \"taskName\" ? value.toUpperCase() : value;\n\n    try {\n      setLoadingTask(true);\n      const update = await api.updateByKeyName(id, key, value);\n\n      if (update) {\n        setLoadingTask(false);\n        setTaskList(sortTasks(editedTask));\n      }\n    } catch {\n      setLoadingTask(false);\n      alert(\"Unable to update task.\");\n    }\n  };\n\n  const addTaskHandler = async ({ taskName, taskDesc, taskTime }: ITask) => {\n    // jeżeli atualizujemy stan zależny od wartości obecnej warto posłużyć\n    // sie funckja call back by zapobiec złym przypisaniom\n    // bo stan moze sie zmienic nagle podczas zmiany\n    taskName = taskName.toUpperCase();\n    const newTask = { id: randomId(taskList), taskName, taskTime, taskDesc };\n\n    try {\n      setLoadingAdd(true);\n      const response = await api.put(newTask);\n\n      if (response) {\n        setLoadingAdd(false);\n        setTaskList((prevState) => {\n          return sortTasks([...prevState, newTask]);\n        });\n      }\n    } catch {\n      setLoadingAdd(false);\n      alert(\"Unable to add new task to database.\");\n    }\n  };\n\n  const removeTaskHandler = async (n: number) => {\n    try {\n      setLoadingTask(true);\n      const remove = await api.delete(n);\n      if (remove) {\n        setTaskList((prevState) => {\n          return prevState.filter((element) => element.id !== n);\n        });\n        closeTaskCard();\n        setLoadingTask(false);\n      }\n    } catch {\n      alert(\"Unable complete task.\");\n    }\n  };\n\n  useEffect(() => {\n    const getAllTasks = async () => {\n      try {\n        const getAll = (await api.get()) as ITask[];\n        if (getAll) {\n          setTaskList(sortTasks(getAll));\n          setLoadingList(false);\n        }\n      } catch (error) {\n        alert(\"Unable to get tasks.\");\n      }\n    };\n    getAllTasks();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <TaskAdd addTask={addTaskHandler} loading={loadingAdd} />\n      <TaskCard\n        task={task}\n        show={taskCard}\n        close={closeTaskCard}\n        removeTask={removeTaskHandler}\n        editTask={editTaskHandler}\n        loading={loadingTask}\n      />\n\n      <TasksList\n        tasks={taskList}\n        taskClick={showTaskCard}\n        loading={loadingList}\n      />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nimport \"./Header.css\";\nimport { currDate } from \"../../utils/helperMethod\";\n\ninterface Props {}\n\nexport const Header: React.FC<Props> = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"mainWrapper\">\n        <div className=\"headerWrapper\">\n          <div className=\"dateDisplay\">\n            {currDate.dayName},\n            <span className=\"rest\">\n              {currDate.day} {currDate.month}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { TodoList } from \"./components/TodoList/TodoList\";\nimport \"./App.css\";\nimport { Header } from \"./components/Header/Header\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"container\">\n        <TodoList />\n      </div>\n    </div>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}